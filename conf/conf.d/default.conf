#upstream spring-app {
#    least_conn;  # 최소 연결 수 기반 로드 밸런싱
#    server 172.31.11.227:8080;
#    # server 172.31.34.63:8080;
#    keepalive 32;  # Maximum keepalive connections per server
#}

server {
    listen 80;
    listen [::]:80;
    server_name tmarket.store;
    # 모든 HTTP 요청을 HTTPS로 리디렉션
    return 301 https://$host$request_uri;
}

server {
     listen 443 ssl;
     server_name tmarket.store;
     root /usr/share/nginx/html;
    #server_name 3.36.96.0;

     include /etc/nginx/default.d/*.conf;

     ssl_certificate /home/ubuntu/certificate.crt;
     ssl_certificate_key /home/ubuntu/private.key;

     # SSI 프로토 버전 설정 (권장 사항)
     ssl_protocols TLSv1.2 TLSv1.3;  # 수정: TLS 버전

      # Timeout settings
     keepalive_timeout 65;  # Increase keep-alive timeout
     client_body_timeout 60s;  # Timeout for reading the request body
     client_header_timeout 60s;  # Timeout for reading request headers
     send_timeout 60s;  # Timeout for sending data to the client

    location / {
        root   /usr/share/nginx/html; # 리액트 파일 경로
        index  index.html index.htm;
        try_files $uri $uri/ /index.html; # 리액트의 SPA 라우팅을 위해 index.html로 요청 전달

        # location 안에 넣어줘야함
        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;
    }

    location /static/ {
         alias /usr/share/nginx/html/static/;
     }

    location /api/ {
        proxy_pass http://spring-app:8080;  # HTTP로 Spring 애플리케이션에 연결
        #proxy_pass http://spring-app;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS 헤더 설정
        add_header 'Access-Control-Allow-Origin' 'https://tmarket.store';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Cache-Control, X-Requested-With';

        # Preflight 요청(OPTIONS)을 위한 응답
         if ($request_method = OPTIONS) {
             add_header 'Access-Control-Allow-Origin' 'https://tmarket.store';
             add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
             add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Cache-Control, X-Requested-With';
             add_header 'Access-Control-Allow-Credentials' 'true';
             add_header 'Access-Control-Max-Age' 1728000;  # Preflight 요청을 캐시하는 시간 (20일)
             return 204;  # No Content 응답
         }
      }

    location /api/notifications/subscribe {
          proxy_pass http://spring-app:8080;  # HTTP로 Spring 애플리케이션에 연결
          #proxy_pass http://spring-app;
          proxy_http_version 1.1; # Use HTTP/1.1 for SSE
          proxy_set_header Upgrade $http_upgrade; # For upgrading to websocket if needed
          proxy_set_header Connection "keep-alive"; # Necessary for SSE
          proxy_set_header Host $host; # Forward the original Host header
          proxy_set_header X-Real-IP $remote_addr; # Forward the client IP address
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Proxy forwarding headers
          proxy_set_header X-Forwarded-Proto $scheme; # Protocol used by the client (http or https)
          proxy_buffering off; # Disable buffering for SSE
    }

    location /stomp/chat {
          proxy_pass http://spring-app:8080;  # HTTP로 Spring 애플리케이션에 연결
          #proxy_pass http://spring-app;
          proxy_http_version 1.1; # Use HTTP/1.1 for WebSocket
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          proxy_set_header Host $host; # Forward the original Host header
          proxy_set_header X-Real-IP $remote_addr;  # Forward the client IP address
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Proxy forwarding headers
          proxy_set_header X-Forwarded-Proto $scheme;  # Protocol used by the client (http or https)
          #proxy_read_timeout 86400s;  # Set long timeout for WebSocket
          #proxy_send_timeout 86400s;  # Set long timeout for WebSocket
          #proxy_set_header X-NginX-Proxy true;

          # CORS 헤더 설정
          add_header 'Access-Control-Allow-Origin' 'https://tmarket.store';
          add_header 'Access-Control-Allow-Credentials' 'true';
          add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Cache-Control, X-Requested-With';

          # Handle Preflight requests (OPTIONS)
          if ($request_method = OPTIONS) {
              add_header 'Access-Control-Allow-Origin' 'https://tmarket.store';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
              add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Cache-Control, X-Requested-With';
              add_header 'Access-Control-Allow-Credentials' 'true';
              add_header 'Access-Control-Max-Age' 1728000;  # Cache preflight response for 20 days
              return 204;  # No Content response for OPTIONS
          }
      }
 }